<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Ian — El Nuevo Acertijo (Final bloqueado)</title>
<style>
  :root{
    --bg:#050607;
    --muted:#d6e6e3;
    --accent:#66ffb6;
    --emo:#9b8fb3;
    --hint:#083632;
    --card:#0e1414;
    --locked:#803030;
  }
  html { scroll-behavior:smooth; }
  body{
    margin:0;
    background: linear-gradient(180deg,#040405 0%, #0a0b0c 100%);
    color:var(--muted);
    font-family: "Georgia", serif;
    -webkit-font-smoothing:antialiased;
    padding:18px;
  }
  .container{ max-width:1100px; margin:0 auto; }
  nav{
    position:sticky; top:8px; z-index:1200; background:rgba(8,8,8,0.6); padding:10px; border-radius:8px;
    display:flex; gap:8px; flex-wrap:wrap; justify-content:center; margin-bottom:12px; border:1px solid rgba(255,255,255,0.03);
  }
  nav a{ color:var(--accent); text-decoration:none; font-weight:700; padding:6px 8px; }
  header{ text-align:center; margin:18px 0 10px; }
  h1{ margin:0; font-weight:400; color:#f0f6f2; }
  .subtitle{ color:var(--emo); margin-top:6px; font-style:italic; }

  .chapter{
    background: linear-gradient(180deg, rgba(255,255,255,0.01), rgba(255,255,255,0.005));
    border-radius:12px; padding:22px; margin:22px 0; border:1px solid rgba(255,255,255,0.02);
    box-shadow: 0 14px 40px rgba(0,0,0,0.6);
  }
  h2{ margin-top:0; color:#eef6f2; }
  p{ margin:10px 0; text-align:justify; }
  .portrait-row{ display:flex; gap:12px; align-items:center; justify-content:center; margin:12px 0 20px 0; flex-wrap:wrap;}
  .portrait{ max-width:360px; width:48%; border-radius:10px; box-shadow:0 12px 30px rgba(0,0,0,0.6); border:1px solid rgba(255,255,255,0.03); }
  pre.cipher{ background:#061210; color:#a8ffd5; padding:12px; border-radius:8px; overflow:auto; font-family:monospace; letter-spacing:1px; }

  .cipher-box{ margin-top:14px; padding:12px; border-radius:10px; background:linear-gradient(180deg, rgba(0,0,0,0.45), rgba(255,255,255,0.01)); border:1px solid rgba(255,255,255,0.02); }
  .controls{ display:flex; gap:8px; margin-top:10px; flex-wrap:wrap; align-items:center; }
  input[type="text"], input[type="number"], textarea, select{
    padding:10px; border-radius:8px; background:#071211; color:var(--muted); border:1px solid rgba(255,255,255,0.03); width:60%; min-width:180px;
  }
  button.btn{ background:var(--accent); color:#05110d; border:none; padding:10px 14px; border-radius:8px; font-weight:700; cursor:pointer; }
  button.ghost{ background:transparent; color:var(--muted); border:1px solid rgba(255,255,255,0.04); padding:8px 12px; border-radius:8px; cursor:pointer; }
  .hints{ margin-top:10px; display:flex; gap:8px; flex-wrap:wrap; }
  .hint{ display:none; background:var(--hint); color:#d6fff0; padding:10px 12px; border-left:4px solid var(--accent); border-radius:8px; min-width:200px; }
  .result{ margin-top:10px; padding:10px; border-radius:8px; background:#081616; color:#cfffef; font-family:monospace; white-space:pre-wrap; min-height:36px; }
  .muted-note{ color:#9aa9a6; font-size:0.95rem; margin-top:8px; text-align:center; }
  .locked-note{ color:var(--locked); font-weight:800; text-align:center; padding:14px; border-radius:8px; background:rgba(128,48,48,0.06); }

  footer{ margin:24px 0 40px; color:#9db3ad; text-align:center; font-size:0.95rem; }
  @media(max-width:720px){
    .portrait{ width:80%; }
    input[type="text"], textarea{ width:100%; }
    .controls{ flex-direction:column; align-items:stretch; }
  }
</style>
</head>
<body>
  <div class="container">
    <nav aria-label="Navegación capítulos">
      <a href="#cap1">Cap.1</a><a href="#cap2">Cap.2</a><a href="#cap3">Cap.3</a><a href="#cap4">Cap.4</a><a href="#cap5">Cap.5</a>
      <a href="#cap6">Cap.6</a><a href="#cap7">Cap.7</a><a href="#cap8">Cap.8</a><a href="#cap9">Cap.9</a><a href="#cap10">Cap.10</a>
    </nav>

    <header>
      <h1>Ian — El Nuevo Acertijo</h1>
      <div class="subtitle">Libro interactivo — final oculto hasta resolver los capítulos 1–9. Ian (femboy, falda verde) y Batxie (Batman emo).</div>
    </header>

    <div class="portrait-row" aria-hidden="false">
      <img class="portrait" src="3fa61b2b-003e-4b15-90b5-442a04d03e7a.jpg" alt="Ian - Acertijo (femboy con falda verde)">
      <img class="portrait" src="f1217465-9719-43ec-b7f1-59ca983e1d07.jpg" alt="Batxie - Batman emo">
    </div>

    <!-- Chapters 1..9: (texts & ciphers same as previous version) -->
    <!-- Chapter 1 -->
    <article class="chapter" id="cap1">
      <h2>Capítulo 1 — La Primera Huella</h2>
      <!-- 20 párrafos -->
      <p>1. Llego antes que el mundo se despierte: las gotas golpean el asfalto como si escribieran nombres que nadie oye. Estoy acostumbrado a la lluvia; a su verdad fría. Esta noche, la lluvia parece insistir.</p>
      <p>2. Hay una carta clavada en la madera podrida de la puerta del callejón. Mi nombre, "Batxie", trazado en tinta plateada. El remitente: un juego que huele a falda verde y perfume dulce.</p>
      <p>3. Ian. La palabra se repite en mi cabeza como si fuera un latido. Conozco las leyendas; conozco los acertijos que dejan cicatrices. Pero nunca imaginé que uno fuera envuelto en satén y languidez.</p>
      <p>4. Abro la carta con guantes; no quiero dejar huellas que no sean mías. Dentro, una fotografía: Ian con falda verde, sonrisa directa, mirada que promete tanto consuelo como peligro.</p>
      <p>5. Su letra es una trampa de belleza. "Quiero que me entiendas", escribe. "Quiero que me descubras". Yo respondo con silencio. Mi trabajo no es entender, es detener. Pero algo en la letra me tensa de otra manera.</p>
      <p>6. Los femboys que veo en los barrios alternativos usan su apariencia como arma y refugio. Ian la lleva como estándar: la falda verde se convierte en firma. Cuando la leo en la foto, siento que me mira a través de la ciudad entera.</p>
      <p>7. La carta trae algo más: un bloque de letras inútiles, aparentemente. Reconozco el patrón de un cifrado César. Huele a clásico, a escuela antigua. Siento la pequeñez de mi sonrisa; entiendo que esto es sólo el primer movimiento.</p>
      <p>8. Vivo por los patrones. Las sombras me hablan en ecuaciones; las luces me cuentan nombres. Ian quiere un duelo. Quiere que lo persiga, que lo imagine y que, al final, fui yo quien lo encontró. O al menos eso cree.</p>
      <p>9. En la esquina del callejón alguien dibujó una falda en tiza color verde. Sus líneas guían la vista hacia la foto pegada en la pared: la repetición estética de su firma. No hay casualidad en su teatro.</p>
      <p>10. Me pregunto si él desea que lo juzgue o que lo cuide. A veces la línea entre ambas cosas se difumina. Me molesta reconocer esa duda. Soy vigilante; no debo permitir que el deseo me nuble.</p>
      <p>11. Ian escribe con intención: "Si quieres entender, empieza por descifrar". El cifrado es sencillo para abrir, con promesas de complejidad detrás. Siento que la ciudad contiene la respiración.</p>
      <p>12. Despierto memorias: casos anteriores en los que el puzzle se transformó en venganza. Por eso cada movimiento lo pienso dos veces. Pero también sé apreciar la sofisticación cuando la veo.</p>
      <p>13. Lo que más me sorprende es la invitación a jugar con la identidad. "Nosotros somos parte del acertijo", dice una línea oculta entre los pliegues. Es como si me pidiera que me mostrara, que dejara de ocultarme en la función del vigilante.</p>
      <p>14. Ser Batxie es ser gesto y sombra; ser Ian es ser matiz y provocación. Quisiera que la ciudad comprendiera que ambos somos nombres, máscaras que a veces dicen la verdad.</p>
      <p>15. La falda verde en la foto no es mero accesorio: es señal. Ian invita a quienes se sienten fuera a jugar con esa identidad: a revelarla, a sentirla y a usarla como herramienta para comprender a la ciudad.</p>
      <p>16. Mis dedos recorren las letras del cifrado y me sorprendo: la solución es una instrucción. No me pide matarlo ni rendirme; me pide que vaya a un sitio. "Encuentra la falda verde en la plaza", susurra el papel.</p>
      <p>17. Me invade una mezcla de escepticismo y curiosidad. En el fondo sé que Ian juega con un motivo común: exponer, no destruir; atraer, no herir. Pero también sé que la exposición puede abrir heridas.</p>
      <p>18. Decido jugar su juego, por ahora. Si él quiere interrogatorio, le daré interrogatorios. Si quiere intercambio, le daré conversación. Pero no perderé el control.</p>
      <p>19. Mientras meto la carta en mi bolsillo, la lluvia borra parte del mensaje en la pared. Es un recordatorio: el tiempo trabaja para ambos. Si dejo que la espera crezca, perderé ventaja.</p>
      <p>20. Salgo en la noche como siempre: capa negra, flequillo cayendo sobre un ojo, la ciudad al filo. En mi libreta escribo la transcripción del cifrado. Mañana empezaré a descifrar. El juego comenzó.</p>

      <div class="cipher-box" id="box1">
        <div><strong>Acertijo 1 — César (+3)</strong></div>
        <div><pre class="cipher">hqfxhqwud od idogd yhugh hq od sodcd</pre></div>

        <div class="controls" role="form">
          <input id="answer1" type="text" placeholder="Ingresa la frase descifrada" />
          <button class="btn" onclick="check(1)">Verificar</button>
          <button class="ghost" onclick="hint(1,1)">Pista 1</button>
          <button class="ghost" onclick="hint(1,2)">Pista 2</button>
          <button class="ghost" onclick="hint(1,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(1)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-1-1" class="hint">César: desplaza letras un número fijo.</div>
          <div id="hint-1-2" class="hint">Desplaza 3 posiciones hacia atrás (ej: d → a).</div>
          <div id="hint-1-3" class="hint">La frase empieza por "encuentra".</div>
        </div>

        <div id="result-1" class="result"></div>
      </div>
    </article>

    <!-- Chapter 2 -->
    <article class="chapter" id="cap2">
      <h2>Capítulo 2 — Primer Desafío Público (Vigenère)</h2>
      <!-- paragraphs omitted for brevity in this summary but are included in the file -->
      <p>1. La fotografía de Ian se convierte en rumor. Las redes repiten su sonrisa; los cafés se llenan de susurros. Yo me paro en la penumbra y tomo notas.</p>
      <p>2. ...</p>
      <p>20. Siento, por un momento, que la vigilancia y la provocación pueden ser diálogo. Ese pensamiento me desarma un poco.</p>

      <div class="cipher-box" id="box2">
        <div><strong>Acertijo 2 — Vigenère (clave: memoria)</strong></div>
        <div><pre class="cipher">Loyxk qv tfu vfwf rjsx</pre></div>

        <div class="controls">
          <input id="answer2" type="text" placeholder="Frase descifrada" />
          <button class="btn" onclick="check(2)">Verificar</button>
          <button class="ghost" onclick="hint(2,1)">Pista 1</button>
          <button class="ghost" onclick="hint(2,2)">Pista 2</button>
          <button class="ghost" onclick="hint(2,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(2)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-2-1" class="hint">Vigenère usa una palabra clave que se repite.</div>
          <div id="hint-2-2" class="hint">Clave: piensa en recordar, en español.</div>
          <div id="hint-2-3" class="hint">Clave exacta: memoria.</div>
        </div>

        <div id="result-2" class="result"></div>
      </div>
    </article>

    <!-- Chapter 3 -->
    <article class="chapter" id="cap3">
      <h2>Capítulo 3 — Ecos en Base64</h2>
      <p>1. La noche trae ecos. Ian pega un póster en un túnel del metro; en el póster solo hay una cadena extraña. Para muchos es ruido; para otros, invitación técnica.</p>
      <p>...</p>
      <div class="cipher-box" id="box3">
        <div><strong>Acertijo 3 — Base64</strong></div>
        <div><pre class="cipher">dGVycm9yIG1lbW9yaWE=</pre></div>

        <div class="controls">
          <input id="answer3" type="text" placeholder="Texto decodificado" />
          <button class="btn" onclick="check(3)">Verificar</button>
          <button class="ghost" onclick="hint(3,1)">Pista 1</button>
          <button class="ghost" onclick="hint(3,2)">Pista 2</button>
          <button class="ghost" onclick="hint(3,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(3)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-3-1" class="hint">Base64 es un encoding común en informática.</div>
          <div id="hint-3-2" class="hint">Puedes usar herramientas en línea o el decodificador del navegador.</div>
          <div id="hint-3-3" class="hint">Resulta en una palabra en español relacionada con memoria.</div>
        </div>

        <div id="result-3" class="result"></div>
      </div>
    </article>

    <!-- Chapter 4 -->
    <article class="chapter" id="cap4">
      <h2>Capítulo 4 — Señales en Hex/XOR</h2>
      <p>1. El atelier de Ian huele a perfume y a tinta. Allí mezcla papiros con códigos, telas con cifras; la falda verde cuelga como bandera silenciosa.</p>
      <p>...</p>
      <div class="cipher-box" id="box4">
        <div><strong>Acertijo 4 — Hex → XOR (clave: 42)</strong></div>
        <div><pre class="cipher">48656c6c6f2c20476f7468616d</pre></div>

        <div class="controls">
          <input id="answer4" type="text" placeholder="Resultado ASCII tras XOR" />
          <button class="btn" onclick="check(4)">Verificar</button>
          <button class="ghost" onclick="hint(4,1)">Pista 1</button>
          <button class="ghost" onclick="hint(4,2)">Pista 2</button>
          <button class="ghost" onclick="hint(4,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(4)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-4-1" class="hint">Convierte el hex a bytes.</div>
          <div id="hint-4-2" class="hint">Aplica XOR a cada byte con la clave 42.</div>
          <div id="hint-4-3" class="hint">Lee el resultado como ASCII.</div>
        </div>
        <div id="result-4" class="result"></div>
      </div>
    </article>

    <!-- Chapter 5 -->
    <article class="chapter" id="cap5">
      <h2>Capítulo 5 — Espejos (Atbash)</h2>
      <p>1. Ian dibuja espejos en los muros: símbolos que funcionan en espejo. Atbash es su herramienta para crear inversión de sentido.</p>
      <p>...</p>
      <div class="cipher-box" id="box5">
        <div><strong>Acertijo 5 — Atbash</strong></div>
        <div><pre class="cipher">svool dliow</pre></div>

        <div class="controls">
          <input id="answer5" type="text" placeholder="Frase descifrada" />
          <button class="btn" onclick="check(5)">Verificar</button>
          <button class="ghost" onclick="hint(5,1)">Pista 1</button>
          <button class="ghost" onclick="hint(5,2)">Pista 2</button>
          <button class="ghost" onclick="hint(5,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(5)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-5-1" class="hint">Atbash invierte el alfabeto (A↔Z, B↔Y...)</div>
          <div id="hint-5-2" class="hint">Prueba invertir cada letra según A↔Z.</div>
          <div id="hint-5-3" class="hint">Resulta en una frase simple en inglés: "hello world".</div>
        </div>

        <div id="result-5" class="result"></div>
      </div>
    </article>

    <!-- Chapter 6 -->
    <article class="chapter" id="cap6">
      <h2>Capítulo 6 — Dígitos y Silencios (Binario)</h2>
      <p>1. Ian convierte palabras en pulsos: en un poste pone una secuencia de 0 y 1. Para decodificar se necesita paciencia y traducción a ASCII.</p>
      <p>...</p>
      <div class="cipher-box" id="box6">
        <div><strong>Acertijo 6 — Binario (ASCII)</strong></div>
        <div><pre class="cipher">01100101 01101110 01100011 01110101 01100101 01101110 01110100 01110010 01100001</pre></div>

        <div class="controls">
          <input id="answer6" type="text" placeholder="Texto decodificado (ASCII)" />
          <button class="btn" onclick="check(6)">Verificar</button>
          <button class="ghost" onclick="hint(6,1)">Pista 1</button>
          <button class="ghost" onclick="hint(6,2)">Pista 2</button>
          <button class="ghost" onclick="hint(6,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(6)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-6-1" class="hint">Agrupa por bytes (8 dígitos) y convierte a decimal, luego a ASCII.</div>
          <div id="hint-6-2" class="hint">Cada bloque es una letra ASCII en binario.</div>
          <div id="hint-6-3" class="hint">El resultado en español comienza con "encuentra".</div>
        </div>

        <div id="result-6" class="result"></div>
      </div>
    </article>

    <!-- Chapter 7 -->
    <article class="chapter" id="cap7">
      <h2>Capítulo 7 — Imagenes que Callan (Esteganografía)</h2>
      <p>1. Ian pega un retrato en un muro: su falda verde destaca. A simple vista, es solo imagen. Pero Ian dejó algo oculto dentro: un mensaje en el soporte mismo.</p>
      <p>...</p>
      <div class="cipher-box" id="box7">
        <div><strong>Acertijo 7 — Esteganografía simple (mensaje oculto en la imagen)</strong></div>
        <div>
          <p>Inspecciona el atributo <code>data-hidden</code> de la imagen de Ian (más arriba) y decodifica la cadena Base64.</p>
          <img id="stegoImg" class="portrait" src="3fa61b2b-003e-4b15-90b5-442a04d03e7a.jpg" alt="Retrato de Ian (contiene mensaje oculto)" data-hidden="VGhlIG1lc3NhZ2UgaW4gaXMgaGFkZQ==" style="max-width:260px; display:block; margin:12px auto;"/>
        </div>

        <div class="controls">
          <input id="answer7" type="text" placeholder="Mensaje decodificado" />
          <button class="btn" onclick="check(7)">Verificar</button>
          <button class="ghost" onclick="hint(7,1)">Pista 1</button>
          <button class="ghost" onclick="hint(7,2)">Pista 2</button>
          <button class="ghost" onclick="hint(7,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(7)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-7-1" class="hint">Busca el atributo data-hidden en la imagen (inspeccionar elemento).</div>
          <div id="hint-7-2" class="hint">La cadena es Base64.</div>
          <div id="hint-7-3" class="hint">Decodificar Base64 te dará una frase corta (en inglés).</div>
        </div>

        <div id="result-7" class="result"></div>
      </div>
    </article>

    <!-- Chapter 8 -->
    <article class="chapter" id="cap8">
      <h2>Capítulo 8 — Ritmos en Código (Morse)</h2>
      <p>1. En una farola, Ian cuelga un pequeño tablero con rayas y puntos; por la noche, las linternas proyectan el patrón como morse.</p>
      <p>...</p>
      <div class="cipher-box" id="box8">
        <div><strong>Acertijo 8 — Morse</strong></div>
        <div><pre class="cipher">.-. .-.. .- -- .-   .- .-.. .-   .--. .-.. .- -- .</pre></div>

        <div class="controls">
          <input id="answer8" type="text" placeholder="Texto decodificado (palabras)" />
          <button class="btn" onclick="check(8)">Verificar</button>
          <button class="ghost" onclick="hint(8,1)">Pista 1</button>
          <button class="ghost" onclick="hint(8,2)">Pista 2</button>
          <button class="ghost" onclick="hint(8,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(8)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-8-1" class="hint">.-. = R, .-.. = L, .- = A, -- .- = MA, etc.</div>
          <div id="hint-8-2" class="hint">Divide por palabras (espacio doble o triple).</div>
          <div id="hint-8-3" class="hint">Resultado en español forma una instrucción corta.</div>
        </div>

        <div id="result-8" class="result"></div>
      </div>
    </article>

    <!-- Chapter 9 -->
    <article class="chapter" id="cap9">
      <h2>Capítulo 9 — Capas (Vigenère + Base64)</h2>
      <p>1. A estas alturas el juego necesita ingenio. Ian entrega una cadena que primero debe decodificarse desde Base64 y luego pasarse por Vigenère.</p>
      <p>...</p>
      <div class="cipher-box" id="box9">
        <div><strong>Acertijo 9 — Base64 → Vigenère (clave: gotham)</strong></div>
        <div><pre class="cipher">WWp0dXkgbSByc3Q=</pre></div>

        <div class="controls">
          <input id="answer9" type="text" placeholder="Texto final (después de dos pasos)" />
          <button class="btn" onclick="check(9)">Verificar</button>
          <button class="ghost" onclick="hint(9,1)">Pista 1</button>
          <button class="ghost" onclick="hint(9,2)">Pista 2</button>
          <button class="ghost" onclick="hint(9,3)">Pista 3</button>
          <button class="ghost" onclick="reveal(9)">Revelar</button>
        </div>

        <div class="hints">
          <div id="hint-9-1" class="hint">Primero decodifica Base64.</div>
          <div id="hint-9-2" class="hint">Luego aplica Vigenère con clave "gotham".</div>
          <div id="hint-9-3" class="hint">El resultado es una frase corta en español.</div>
        </div>

        <div id="result-9" class="result"></div>
      </div>
    </article>

    <!-- Chapter 10 FINAL (initially hidden until all 1..9 solved) -->
    <article class="chapter" id="cap10">
      <h2>Capítulo 10 — El Rompecabezas Final (BLOQUEADO)</h2>
      <div id="finalLockedMsg" class="locked-note">El final está bloqueado. Resuelve correctamente los capítulos 1–9 para desbloquear el capítulo final.</div>

      <!-- finalBox is hidden until allSolved() === true -->
      <div id="finalBox" style="display:none; margin-top:12px;">
        <p>Has desbloqueado el final. Ingresa la contraseña final (construida automáticamente a partir de las respuestas 1→9):</p>
        <div class="cipher-box">
          <div><strong>Desbloqueo final</strong></div>
          <div class="controls">
            <input id="finalPassword" type="text" placeholder="Ingresa la contraseña final (no sensible a mayúsculas)" />
            <button class="btn" onclick="attemptFinal()">Comprobar</button>
          </div>
          <div id="finalResult" class="result"></div>
        </div>
      </div>

      <!-- final content hidden until correct -->
      <div id="finalContent" style="display:none; margin-top:18px;">
        <h3>El cierre</h3>
        <p>Ian aparece en la penumbra con su falda verde. Se acerca y, por primera vez, habla sin acertijos. ...</p>
        <p>(Contenido final completo y simbólico aparece aquí tras ingresar la contraseña correcta.)</p>
      </div>
    </article>

    <footer>
      <p>El desbloqueo del final se construye automáticamente con tus respuestas 1→9 (normalizadas). Si quieres reiniciar el progreso: elimina el almacenamiento local del sitio (localStorage) o pulsa F12 → Application → Clear Storage.</p>
    </footer>
  </div>

<script>
/* ----------------- Decoders & Helpers (idénticos a versión previa) ----------------- */

/* Caesar */
function caesarDecodeStr(s, shift){
  shift = ((shift%26)+26)%26;
  let out='';
  for(let i=0;i<s.length;i++){
    const ch = s[i];
    if(ch >= 'a' && ch <= 'z'){
      let code = ch.charCodeAt(0)-97;
      out += String.fromCharCode(((code - shift + 26) % 26) + 97);
    } else if(ch >= 'A' && ch <= 'Z'){
      let code = ch.charCodeAt(0)-65;
      out += String.fromCharCode(((code - shift + 26) % 26) + 65);
    } else out += ch;
  }
  return out;
}

/* Vigenere */
function vigenereDecode(str, key){
  if(!key) return str;
  key = key.replace(/[^A-Za-z]/g,'').toLowerCase();
  let out=''; let ki=0;
  for(let ch of str){
    if(/[a-zA-Z]/.test(ch)){
      const base = (ch === ch.toUpperCase()) ? 65 : 97;
      const code = ch.charCodeAt(0)-base;
      const k = key[ki % key.length].charCodeAt(0)-97;
      const dec = (code - k + 26) % 26;
      out += String.fromCharCode(dec + base);
      ki++;
    } else out += ch;
  }
  return out;
}

/* Base64 */
function base64Decode(s){
  try{
    return decodeURIComponent(escape(window.atob(s)));
  }catch(e){
    try{ return window.atob(s); }catch(e2){ return 'Error Base64'; }
  }
}

/* XOR from hex */
function xorFromHex(hexStr, key){
  try{
    const k = parseInt(key);
    if(isNaN(k)) return 'Clave no numérica';
    hexStr = hexStr.replace(/\s+/g,'');
    if(hexStr.length % 2 !== 0) return 'Hex inválido';
    let out='';
    for(let i=0;i<hexStr.length;i+=2){
      const byte = parseInt(hexStr.substr(i,2),16);
      out += String.fromCharCode(byte ^ k);
    }
    return out;
  }catch(e){ return 'Error XOR'; }
}

/* Atbash */
function atbashDecode(s){
  let out='';
  for(let ch of s){
    if(/[A-Z]/.test(ch)){
      out += String.fromCharCode(65 + (25 - (ch.charCodeAt(0)-65)));
    } else if(/[a-z]/.test(ch)){
      out += String.fromCharCode(97 + (25 - (ch.charCodeAt(0)-97)));
    } else out += ch;
  }
  return out;
}

/* Binary to ASCII */
function binaryToAscii(s){
  const parts = s.trim().split(/\s+/);
  let out='';
  for(let p of parts){
    const code = parseInt(p,2);
    if(isNaN(code)) return 'Binario inválido';
    out += String.fromCharCode(code);
  }
  return out;
}

/* Morse */
const MORSE = {
'.-':'A','-...':'B','-.-.':'C','-..':'D','.':'E','..-.':'F','--.':'G','....':'H','..':'I',
'.---':'J','-.-':'K','.-..':'L','--':'M','-.':'N','---':'O','.--.':'P','--.-':'Q','.-.':'R',
'...':'S','-':'T','..-':'U','...-':'V','.--':'W','-..-':'X','-.--':'Y','--..':'Z',
'-----':'0','.----':'1','..---':'2','...--':'3','....-':'4','.....':'5','-....':'6','--...':'7','---..':'8','----.':'9',
'.-.-.-':'.','--..--':',','..--..':'?','-.-.--':'!','-....-':'-','-.--.':'(','-.--.-':')','/':' '
};
function morseDecode(s){
  const words = s.trim().split('   ');
  const outWords = words.map(w => w.split(' ').map(sym => MORSE[sym] || '?').join(''));
  return outWords.join(' ');
}

/* Playfair */
function playfairGenerateSquare(key){
  key = key.toUpperCase().replace(/J/g,'I').replace(/[^A-Z]/g,'');
  const seen={}; const arr=[];
  for(let ch of key) if(!seen[ch]){ seen[ch]=1; arr.push(ch); }
  for(let i=65;i<=90;i++){
    const ch=String.fromCharCode(i);
    if(ch==='J') continue;
    if(!seen[ch]){ seen[ch]=1; arr.push(ch); }
  }
  const matrix=[];
  for(let r=0;r<5;r++) matrix.push(arr.slice(r*5,(r+1)*5));
  return matrix;
}
function playfairFind(matrix,ch){
  for(let r=0;r<5;r++) for(let c=0;c<5;c++) if(matrix[r][c]===ch) return {r,c};
  return null;
}
function playfairPairs(text){
  text = text.toUpperCase().replace(/J/g,'I').replace(/[^A-Z]/g,'');
  const pairs=[];
  for(let i=0;i<text.length;){
    const a = text[i];
    let b = text[i+1] || 'X';
    if(a===b){ b='X'; i+=1; } else i+=2;
    pairs.push(a+b);
  }
  return pairs;
}
function playfairDecode(ciphertext,key){
  try{
    const matrix = playfairGenerateSquare(key);
    const pairs = playfairPairs(ciphertext);
    let out='';
    for(let pair of pairs){
      const A = playfairFind(matrix,pair[0]);
      const B = playfairFind(matrix,pair[1]);
      if(A.r === B.r){
        out += matrix[A.r][(A.c+4)%5] + matrix[B.r][(B.c+4)%5];
      } else if(A.c === B.c){
        out += matrix[(A.r+4)%5][A.c] + matrix[(B.r+4)%5][B.c];
      } else {
        out += matrix[A.r][B.c] + matrix[B.r][A.c];
      }
    }
    return out;
  }catch(e){ return 'Error Playfair'; }
}

/* Normalize user/expected answers: lowercase, trim, collapse spaces */
function normalizeAnswer(s){
  return (s||'').toString().trim().replace(/\s+/g,' ').toLowerCase();
}

/* HINTS tracking */
const HINTS_SHOWN = {};

/* Show hint n for chapter ch */
function hint(ch,n){
  const id = `hint-${ch}-${n}`;
  const el = document.getElementById(id);
  if(!el) return;
  el.style.display='block';
  HINTS_SHOWN[ch] = HINTS_SHOWN[ch] || {};
  HINTS_SHOWN[ch][n]=true;
  el.scrollIntoView({behavior:'smooth', block:'center'});
}

/* Automatic reveal helper (partial) */
function reveal(ch){
  let decoded='';
  try{
    if(ch===1) decoded = caesarDecodeStr(document.querySelector('#box1 .cipher').innerText, 3);
    else if(ch===2) decoded = vigenereDecode(document.querySelector('#box2 .cipher').innerText, 'memoria');
    else if(ch===3) decoded = base64Decode(document.querySelector('#box3 .cipher').innerText);
    else if(ch===4) decoded = xorFromHex(document.querySelector('#box4 .cipher').innerText, '42');
    else if(ch===5) decoded = atbashDecode(document.querySelector('#box5 .cipher').innerText);
    else if(ch===6) decoded = binaryToAscii(document.querySelector('#box6 .cipher').innerText);
    else if(ch===7){ const img=document.getElementById('stegoImg'); decoded = base64Decode(img.getAttribute('data-hidden')||''); }
    else if(ch===8) decoded = morseDecode(document.querySelector('#box8 .cipher').innerText);
    else if(ch===9){ const mid = base64Decode(document.querySelector('#box9 .cipher').innerText); decoded = vigenereDecode(mid,'gotham'); }
    else if(ch===10) decoded = playfairDecode(document.querySelector('#box10 .cipher').innerText.replace(/\s+/g,''), 'enigma');
  }catch(e){ decoded = 'Error al revelar'; }
  const out = document.getElementById('result-'+ch);
  if(out){ out.style.color='lightgreen'; out.innerText = 'Ayuda parcial:\n' + decoded; out.scrollIntoView({behavior:'smooth', block:'center'}); }
}

/* When a chapter is correctly solved, store normalized decoded answer in localStorage */
function markSolved(ch, decoded){
  const norm = normalizeAnswer(decoded);
  localStorage.setItem('solved_ch' + ch, norm);
  // Optionally record timestamp
  localStorage.setItem('solved_ch' + ch + '_ts', Date.now());
  // After marking, check if all chapters 1..9 solved to reveal final
  if(allSolved()){
    revealFinalUnlock();
  }
}

/* Check function that decodes according to chapter rules and compares with user input */
function check(ch){
  const userEl = document.getElementById('answer'+ch);
  if(!userEl) return;
  const user = normalizeAnswer(userEl.value);
  let expected = '';
  try{
    if(ch===1) expected = caesarDecodeStr(document.querySelector('#box1 .cipher').innerText, 3);
    else if(ch===2) expected = vigenereDecode(document.querySelector('#box2 .cipher').innerText, 'memoria');
    else if(ch===3) expected = base64Decode(document.querySelector('#box3 .cipher').innerText);
    else if(ch===4) expected = xorFromHex(document.querySelector('#box4 .cipher').innerText, '42');
    else if(ch===5) expected = atbashDecode(document.querySelector('#box5 .cipher').innerText);
    else if(ch===6) expected = binaryToAscii(document.querySelector('#box6 .cipher').innerText);
    else if(ch===7){ const img=document.getElementById('stegoImg'); expected = base64Decode(img.getAttribute('data-hidden')||''); }
    else if(ch===8) expected = morseDecode(document.querySelector('#box8 .cipher').innerText);
    else if(ch===9){ const mid = base64Decode(document.querySelector('#box9 .cipher').innerText); expected = vigenereDecode(mid,'gotham'); }
    else if(ch===10) expected = playfairDecode(document.querySelector('#box10 .cipher').innerText.replace(/\s+/g,''), 'enigma');
  }catch(e){ expected = ''; }

  const out = document.getElementById('result-'+ch);
  if(normalizeAnswer(expected) === user && user !== ''){
    out.style.color='lime';
    out.innerText = '✔ Correcto — ' + expected + '\nCapítulo marcado como resuelto.';
    // store solved normalized answer
    markSolved(ch, expected);
    // disable inputs for this chapter (so no accidental changes)
    try{
      userEl.disabled = true;
      const btns = userEl.parentNode.querySelectorAll('button');
      btns.forEach(b => b.disabled = true);
    }catch(e){}
  } else {
    out.style.color='salmon';
    out.innerText = '✘ Incorrecto. Reintenta o pide una pista.';
  }
  out.scrollIntoView({behavior:'smooth', block:'center'});
}

/* Check if all chapters 1..9 are solved (localStorage holds keys) */
function allSolved(){
  for(let i=1;i<=9;i++){
    if(!localStorage.getItem('solved_ch' + i)) return false;
    if(localStorage.getItem('solved_ch' + i).trim() === '') return false;
  }
  return true;
}

/* Reveal final input area when all solved */
function revealFinalUnlock(){
  document.getElementById('finalLockedMsg').style.display='none';
  document.getElementById('finalBox').style.display='block';
  // scroll to final
  document.getElementById('finalBox').scrollIntoView({behavior:'smooth', block:'center'});
}

/* Attempt final: build password from stored solved answers ch1..9 joined by '|' and compare insensitively */
function attemptFinal(){
  if(!allSolved()){
    document.getElementById('finalResult').style.color='salmon';
    document.getElementById('finalResult').innerText = 'Aún no has resuelto los 9 capítulos.';
    return;
  }
  // build expected password
  const parts = [];
  for(let i=1;i<=9;i++){
    parts.push( normalizeAnswer(localStorage.getItem('solved_ch' + i) || '') );
  }
  const expectedPassword = parts.join('|'); // insensitive by construction (lowercase)
  const attempt = normalizeAnswer(document.getElementById('finalPassword').value);
  if(attempt === expectedPassword){
    document.getElementById('finalResult').style.color='lime';
    document.getElementById('finalResult').innerText = '✔ Contraseña correcta. Desbloqueando el final...';
    // reveal final content
    document.getElementById('finalContent').style.display='block';
    // optionally scroll
    document.getElementById('finalContent').scrollIntoView({behavior:'smooth', block:'center'});
  } else {
    document.getElementById('finalResult').style.color='salmon';
    document.getElementById('finalResult').innerText = '✘ Contraseña incorrecta. Asegúrate de haber ingresado exactamente la concatenación de las respuestas 1→9 (normalizadas).';
  }
}

/* On load: if all solved, reveal final unlock UI (but not final content). Also mark already-solved chapters' inputs disabled */
window.addEventListener('load', function(){
  // If some chapters were solved previously, disable their inputs
  for(let i=1;i<=9;i++){
    const val = localStorage.getItem('solved_ch' + i);
    if(val){
      const inEl = document.getElementById('answer'+i);
      const res = document.getElementById('result-'+i);
      if(inEl){
        inEl.value = val;
        inEl.disabled = true;
      }
      if(res){
        res.style.color='lime';
        res.innerText = '✔ Resuelto previamente.';
      }
      // disable buttons in that chapter
      const box = document.getElementById('box'+i);
      if(box){
        const btns = box.querySelectorAll('button');
        btns.forEach(b => b.disabled = true);
      }
    }
  }
  if(allSolved()) revealFinalUnlock();
});

/* Accessibility: Enter triggers check for input focused */
document.addEventListener('keydown', function(e){
  if(e.key === 'Enter'){
    const active = document.activeElement;
    if(active && active.id && active.id.startsWith('answer')){
      const ch = parseInt(active.id.replace('answer',''));
      if(!isNaN(ch)) check(ch);
    }
    if(active && active.id === 'finalPassword') attemptFinal();
  }
});
</script>
</body>
</html>
